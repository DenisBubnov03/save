# commands/student_notifications.py

from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from commands.authorized_users import AUTHORIZED_USERS
from commands.start_commands import exit_to_main_menu
from commands.states import NOTIFICATION_MENU
from student_management.student_management import get_all_students


def calculate_due_payments(students):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –æ–ø–ª–∞—Ç–∞–º.
    """
    payment_notifications = []
    for student in students:
        if student.get("–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω–æ") == "–ù–µ—Ç":
            try:
                due_amount = int(student.get("–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è", 0)) - int(student.get("–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã", 0))
                payment_notifications.append(
                    f"–°—Ç—É–¥–µ–Ω—Ç {student['–§–ò–û']} {student['Telegram']} –¥–æ–ª–∂–µ–Ω {due_amount} —Ä—É–±–ª–µ–π."
                )
            except (ValueError, TypeError):
                payment_notifications.append(
                    f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['–§–ò–û']} {student['Telegram']} –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏."
                )
    return payment_notifications


def calculate_call_notifications(students):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å.
    """
    call_notifications = []
    for student in students:
        if student.get("–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è") == "–£—á–∏—Ç—Å—è":
            last_call_date = student.get("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞")
            if not last_call_date:
                call_notifications.append(
                    f"–°—Ç—É–¥–µ–Ω—Ç {student['–§–ò–û']} {student['Telegram']} –Ω–µ –∑–≤–æ–Ω–∏–ª."
                )
            else:
                try:
                    last_call = datetime.strptime(last_call_date, "%d.%m.%Y")
                    days_since_last_call = (datetime.now() - last_call).days
                    if days_since_last_call > 20:
                        call_notifications.append(
                            f"–°—Ç—É–¥–µ–Ω—Ç {student['–§–ò–û']} {student['Telegram']} –Ω–µ –∑–≤–æ–Ω–∏–ª {days_since_last_call} –¥–Ω–µ–π. –ü–æ—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å!"
                        )
                except ValueError:
                    call_notifications.append(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['–§–ò–û']} {student['Telegram']}: {last_call_date}."
                    )
    return call_notifications


async def show_notifications_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_notifications_menu")
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ü–æ –∑–≤–æ–Ω–∫–∞–º", "–ü–æ –æ–ø–ª–∞—Ç–µ", "–í—Å–µ"], ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return NOTIFICATION_MENU



async def check_call_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è check_call_notifications")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    students = get_all_students()
    call_notifications = calculate_call_notifications(students)

    if call_notifications:
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º:\n" + "\n".join(call_notifications))
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–≤–æ–Ω–∫–∞–º.")
    return await exit_to_main_menu(update, context)



async def check_payment_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è check_payment_notifications")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    students = get_all_students()
    payment_notifications = calculate_due_payments(students)

    if payment_notifications:
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:\n" + "\n".join(payment_notifications))
    else:
        await update.message.reply_text("‚úÖ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ.")
    return await exit_to_main_menu(update, context)



async def check_all_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    students = get_all_students()

    payment_notifications = calculate_due_payments(students)
    call_notifications = calculate_call_notifications(students)

    messages = []

    if payment_notifications:
        messages.append("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –æ–ø–ª–∞—Ç–∞–º:")
        messages.extend(payment_notifications)

    if call_notifications:
        messages.append("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–≤–æ–Ω–∫–∞–º:")
        messages.extend(call_notifications)

    if not messages:
        await update.message.reply_text("‚úÖ –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç!")
    else:
        await update.message.reply_text("\n".join(messages))
    return await exit_to_main_menu(update, context)
