# commands/student_statistic_commands.py
from commands.authorized_users import AUTHORIZED_USERS
from student_management.student_management import get_all_students
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from commands.states import STATISTICS_MENU, COURSE_TYPE_MENU


async def show_statistics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await update.message.reply_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [["üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ü–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è"], ["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return STATISTICS_MENU


async def show_general_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º.
    """
    students = get_all_students()
    total_students = len(students)
    fully_paid = sum(1 for s in students if s.get("–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω–æ") == "–î–∞")
    not_fully_paid = total_students - fully_paid

    await update.message.reply_text(
        f"üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_students}\n"
        f"‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏–ª–∏: {fully_paid}\n"
        f"‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {not_fully_paid}",
        reply_markup=ReplyKeyboardMarkup(
            [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return STATISTICS_MENU


async def show_course_type_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await update.message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üë®‚Äçüíª –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "ü§ñ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üíª –§—É–ª–ª—Å—Ç–µ–∫"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            one_time_keyboard=True
        )
    )
    return COURSE_TYPE_MENU


def filter_students_by_course(students, course_type):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è.

    Args:
        students (list): –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
        course_type (str): –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è.

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ–±—É—á–µ–Ω–∏—è.
    """
    return [s for s in students if s.get("–¢–∏–ø –æ–±—É—á–µ–Ω–∏—è") == course_type]


async def show_course_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, course_type, emoji):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram Update.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
        course_type (str): –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è.
        emoji (str): –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    students = get_all_students()
    filtered_students = filter_students_by_course(students, course_type)

    await update.message.reply_text(
        f"{emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {course_type}:\n\n"
        f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(filtered_students)}",
        reply_markup=ReplyKeyboardMarkup(
            [["üîô –ù–∞–∑–∞–¥"]],
            one_time_keyboard=True
        )
    )
    return COURSE_TYPE_MENU


async def show_manual_testing_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    return await show_course_statistics(update, context, "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üë®‚Äçüíª")


async def show_automation_testing_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    return await show_course_statistics(update, context, "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "ü§ñ")


async def show_fullstack_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –§—É–ª–ª—Å—Ç–µ–∫.
    """
    return await show_course_statistics(update, context, "–§—É–ª–ª—Å—Ç–µ–∫", "üíª")
