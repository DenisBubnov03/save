# commands/student_statistic_commands.py
import re
from datetime import datetime

from commands.authorized_users import AUTHORIZED_USERS
from student_management.student_management import get_all_students
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from commands.states import STATISTICS_MENU, COURSE_TYPE_MENU, START_PERIOD, END_PERIOD


async def show_statistics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await update.message.reply_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ü–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è"],
                ["üìÖ –ü–æ –ø–µ—Ä–∏–æ–¥—É", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
            ],
            one_time_keyboard=True
        )
    )
    return STATISTICS_MENU


async def show_general_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º.
    """
    students = get_all_students()
    total_students = len(students)
    fully_paid = sum(1 for s in students if s.get("–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω–æ") == "–î–∞")
    not_fully_paid = total_students - fully_paid

    await update.message.reply_text(
        f"üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {total_students}\n"
        f"‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏–ª–∏: {fully_paid}\n"
        f"‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {not_fully_paid}",
        reply_markup=ReplyKeyboardMarkup(
            [["üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]],
            one_time_keyboard=True
        )
    )
    return STATISTICS_MENU


async def show_course_type_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await update.message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["üë®‚Äçüíª –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "ü§ñ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üíª –§—É–ª–ª—Å—Ç–µ–∫"],
                ["üîô –ù–∞–∑–∞–¥"]
            ],
            one_time_keyboard=True
        )
    )
    return COURSE_TYPE_MENU


def filter_students_by_course(students, course_type):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –æ–±—É—á–µ–Ω–∏—è.

    Args:
        students (list): –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
        course_type (str): –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è.

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ–±—É—á–µ–Ω–∏—è.
    """
    return [s for s in students if s.get("–¢–∏–ø –æ–±—É—á–µ–Ω–∏—è") == course_type]


async def show_course_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, course_type, emoji):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç Telegram Update.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã.
        course_type (str): –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è.
        emoji (str): –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    students = get_all_students()
    filtered_students = filter_students_by_course(students, course_type)

    await update.message.reply_text(
        f"{emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {course_type}:\n\n"
        f"üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(filtered_students)}",
        reply_markup=ReplyKeyboardMarkup(
            [["üîô –ù–∞–∑–∞–¥"]],
            one_time_keyboard=True
        )
    )
    return COURSE_TYPE_MENU


async def show_manual_testing_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    return await show_course_statistics(update, context, "–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "üë®‚Äçüíª")


async def show_automation_testing_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    return await show_course_statistics(update, context, "–ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "ü§ñ")


async def show_fullstack_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –§—É–ª–ª—Å—Ç–µ–∫.
    """
    return await show_course_statistics(update, context, "–§—É–ª–ª—Å—Ç–µ–∫", "üíª")

async def request_period_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞.
    """
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    return START_PERIOD


async def handle_period_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞.
    """
    try:
        start_date_text = update.message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        start_date = datetime.strptime(start_date_text, "%d.%m.%Y")
        context.user_data["start_date"] = start_date
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return END_PERIOD
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.11.2024):")
        return START_PERIOD


def parse_date(date_text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ –ª—é–±–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
        return datetime.strptime(date_text, "%d.%m.%Y")
    except ValueError:
        pass

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î
        return datetime.strptime(date_text, "%Y-%m-%d")
    except ValueError:
        pass

    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è
    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_text}")


async def handle_period_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.
    """
    try:
        end_date_text = update.message.text.strip()
        end_date = parse_date(end_date_text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä

        start_date = context.user_data.get("start_date")
        if start_date and end_date < start_date:
            await update.message.reply_text("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return END_PERIOD

        context.user_data["end_date"] = end_date

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = get_all_students()
        filtered_students = []

        for student in students:
            if "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è" in student:
                try:
                    student_date = parse_date(student["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è"])
                    if start_date <= student_date <= end_date:
                        filtered_students.append(student)
                except ValueError:
                    print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['–§–ò–û']}: {student['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è']}")

        if not filtered_students:
            await update.message.reply_text("üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        else:
            response = "üìÖ –£—á–µ–Ω–∏–∫–∏, —É—Å—Ç—Ä–æ–∏–≤—à–∏–µ—Å—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:\n\n"
            for student in filtered_students:
                response += f"{student['–§–ò–û']} - {student['Telegram']} (–ù–∞—á–∞–ª–æ: {student['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è']})\n"
            await update.message.reply_text(response)

        return STATISTICS_MENU

    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.12.2024):")
        return END_PERIOD